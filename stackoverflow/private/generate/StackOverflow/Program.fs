type N = 
    | S of N
    | Z
    | Err

let rec nti (x: N) : System.Numerics.BigInteger =
    match x with
    | Err -> bigint -1
    | Z -> bigint 0
    | S y -> (nti y) + (bigint 1)

let rec itn (x: System.Numerics.BigInteger) : N =
    if x.IsZero then Z else S (itn (x - (bigint 1)))

let rec s (a: N) (b: N) : N =
    match a with
    | Err -> Err
    | Z -> b
    | S y -> s y (S b)

let rec m (a: N) (b: N) : N =
    match b with
    | Err -> Err
    | Z -> a
    | S y ->
            match a with
            | Err -> Err
            | Z -> Err
            | S z -> m z y

let rec t (a: N) (b: N) : N =
    match a with
    | Err -> Err
    | Z -> Z
    | S y -> s b (t y b)

let rec r (a: N) (b: N) : N =
    match b with
    | Err -> Err
    | _ ->
            match (m a b) with
            | Err -> a
            | Z -> Z
            | x -> r x b

let rec e (a: N) (b: N) : N =
    match b with
    | Err -> Err
    | Z -> S Z
    | S y -> t a (e a y)

// test with small numbers, remember inv(3, 15) == 3
(*
let a = bigint 8  |> itn
let b = bigint 3  |> itn
let n = bigint 15 |> itn
do printfn "%A" (r (e a b) n |> nti)
*)

// actual challenge code
let a = System.Numerics.BigInteger.Parse "33423998710575643631362225429425392851090952638043250107372622024577329984305302114424528524184145542920103250866878018099187477785659378437636811011349507664997098965288370159438897472203188113174500149898646241021206059726004223144914889900637145837675086792447420138610734515886598466653425757867161798866307466437906171906355348771485084952314854799404837517806734610123419289609813066784078203125" |> itn
let b = System.Numerics.BigInteger.Parse "3403600377294837896130433403491725273860438459971888177819108238676070448090783675744416299931230286083990789628739660929710340128682438261723565387115613259035559282553975491076391190043552815747403040627418572970975260511906830355841384976858790747789361215643640366116903712445416748501914922269450658311940118763739353535950884944327959778539229794252675903044215484320509734208947006867341752115804334199094397768766488738069037866746498014305929168123028421577791454449189026547848293432046197093460710641446450849754128013995351128597475769856358040382990849993181733358479216058533284787263572173745679212023" |> itn
let n = System.Numerics.BigInteger.Parse "7941734213687955090971011274814025639007689739934405748244585890244164378878495243403638033172870667529311842467059208835990793633592355944021652569936430937749638325959276145844912776768289903410607094797310003598942274527782604163629898279337178411508509503168494187606108662372639079837801485295384869394705297897985671612735732857410225917091365252386044346954475253330733402485365327743295908685317687815924049756174328359308730400398436938443894144851711631233576180206112256109120151507342398424184022037102571685966929156752145447477336245427762627907545478260393526353692895687145542356892010058651561361379" |> itn
let y = r (e a b) n |> nti
do printfn "%s" (y.ToByteArray (true, true) |> System.Text.Encoding.UTF8.GetString)
